// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_actions/net/bean/coach_filter_condition_entity.dart';
import 'package:flutter_actions/net/bean/dian_ping_prew_entity.dart';
import 'package:flutter_actions/net/bean/drive_school_detial_entity.dart';
import 'package:flutter_actions/net/bean/find_pwd_auth_entity.dart';
import 'package:flutter_actions/net/bean/jx_image_list_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/advert_sdk_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/motocycle_home_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/n_car_brand_condition_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/n_car_condition_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/n_car_hot_sale_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/n_energy_list_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/nc_recommand1_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/nc_recommand2_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/nc_recommand3_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/ncar_list_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/u_car_list_item_entity.dart';
import 'package:flutter_actions/net/bean/tab/car/u_car_recommand_item_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/home_coach_filter_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/home_filter_label_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/home_filter_school_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/home_query_toast_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/home_school_ad_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/home_tab_entity.dart';
import 'package:flutter_actions/net/bean/tab/home/image_item_entity.dart';
import 'package:flutter_actions/net/bean/tab/mine/badge_entity.dart';
import 'package:flutter_actions/net/bean/tab/mine/mine_r_good_entity.dart';
import 'package:flutter_actions/net/bean/tab/mine/tab_item_entity.dart';
import 'package:flutter_actions/net/bean/tab/mine/tab_mine_banner_entity.dart';
import 'package:flutter_actions/net/bean/tab/video/community_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/video/message_data_entity.dart';
import 'package:flutter_actions/net/bean/tab/video/video_banner_entity.dart';
import 'package:flutter_actions/net/bean/tab/video/video_lesson_entity.dart';
import 'package:flutter_actions/net/bean/tab/video/video_manager_entity.dart';
import 'package:flutter_actions/net/bean/tab/video/video_square_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CoachFilterConditionEntity>[] is M) {
      return data.map<CoachFilterConditionEntity>((Map<String, dynamic> e) =>
          CoachFilterConditionEntity.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionBusTeachTypeList>[] is M) {
      return data.map<CoachFilterConditionBusTeachTypeList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionBusTeachTypeList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionCountyList>[] is M) {
      return data.map<CoachFilterConditionCountyList>((
          Map<String, dynamic> e) => CoachFilterConditionCountyList.fromJson(e))
          .toList() as M;
    }
    if (<CoachFilterConditionCourseClassList>[] is M) {
      return data.map<CoachFilterConditionCourseClassList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionCourseClassList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionDistanceSearchList>[] is M) {
      return data.map<CoachFilterConditionDistanceSearchList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionDistanceSearchList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionIntelligentLabelList>[] is M) {
      return data.map<CoachFilterConditionIntelligentLabelList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionIntelligentLabelList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionLabelList>[] is M) {
      return data.map<CoachFilterConditionLabelList>((Map<String, dynamic> e) =>
          CoachFilterConditionLabelList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionMarketTypeList>[] is M) {
      return data.map<CoachFilterConditionMarketTypeList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionMarketTypeList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionMiniCarTeachTypeList>[] is M) {
      return data.map<CoachFilterConditionMiniCarTeachTypeList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionMiniCarTeachTypeList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionMotoTeachTypeList>[] is M) {
      return data.map<CoachFilterConditionMotoTeachTypeList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionMotoTeachTypeList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionOtherTeachTypeList>[] is M) {
      return data.map<CoachFilterConditionOtherTeachTypeList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionOtherTeachTypeList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionTeachTypeDetailList>[] is M) {
      return data.map<CoachFilterConditionTeachTypeDetailList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionTeachTypeDetailList.fromJson(e)).toList() as M;
    }
    if (<CoachFilterConditionTruckTeachTypeList>[] is M) {
      return data.map<CoachFilterConditionTruckTeachTypeList>((
          Map<String, dynamic> e) =>
          CoachFilterConditionTruckTeachTypeList.fromJson(e)).toList() as M;
    }
    if (<DianPingPrewEntity>[] is M) {
      return data.map<DianPingPrewEntity>((Map<String, dynamic> e) =>
          DianPingPrewEntity.fromJson(e)).toList() as M;
    }
    if (<DianPingPrewItemList>[] is M) {
      return data.map<DianPingPrewItemList>((Map<String, dynamic> e) =>
          DianPingPrewItemList.fromJson(e)).toList() as M;
    }
    if (<DianPingPrewItemListAuthor>[] is M) {
      return data.map<DianPingPrewItemListAuthor>((Map<String, dynamic> e) =>
          DianPingPrewItemListAuthor.fromJson(e)).toList() as M;
    }
    if (<DianPingPrewItemListImageList>[] is M) {
      return data.map<DianPingPrewItemListImageList>((Map<String, dynamic> e) =>
          DianPingPrewItemListImageList.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialEntity>[] is M) {
      return data.map<DriveSchoolDetialEntity>((Map<String, dynamic> e) =>
          DriveSchoolDetialEntity.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialBrandPrivileges>[] is M) {
      return data.map<DriveSchoolDetialBrandPrivileges>((
          Map<String, dynamic> e) =>
          DriveSchoolDetialBrandPrivileges.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialCourses>[] is M) {
      return data.map<DriveSchoolDetialCourses>((Map<String, dynamic> e) =>
          DriveSchoolDetialCourses.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialCoverGroupList>[] is M) {
      return data.map<DriveSchoolDetialCoverGroupList>((
          Map<String, dynamic> e) =>
          DriveSchoolDetialCoverGroupList.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialCoverGroupListCoverList>[] is M) {
      return data.map<DriveSchoolDetialCoverGroupListCoverList>((
          Map<String, dynamic> e) =>
          DriveSchoolDetialCoverGroupListCoverList.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialCoverList>[] is M) {
      return data.map<DriveSchoolDetialCoverList>((Map<String, dynamic> e) =>
          DriveSchoolDetialCoverList.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialDetailDto>[] is M) {
      return data.map<DriveSchoolDetialDetailDto>((Map<String, dynamic> e) =>
          DriveSchoolDetialDetailDto.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialDianping>[] is M) {
      return data.map<DriveSchoolDetialDianping>((Map<String, dynamic> e) =>
          DriveSchoolDetialDianping.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialDianpingCommentCountDataList>[] is M) {
      return data.map<DriveSchoolDetialDianpingCommentCountDataList>((
          Map<String, dynamic> e) =>
          DriveSchoolDetialDianpingCommentCountDataList.fromJson(e))
          .toList() as M;
    }
    if (<DriveSchoolDetialDianpingTagList>[] is M) {
      return data.map<DriveSchoolDetialDianpingTagList>((
          Map<String, dynamic> e) =>
          DriveSchoolDetialDianpingTagList.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialFieldList>[] is M) {
      return data.map<DriveSchoolDetialFieldList>((Map<String, dynamic> e) =>
          DriveSchoolDetialFieldList.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialJiaxiaoPhone>[] is M) {
      return data.map<DriveSchoolDetialJiaxiaoPhone>((Map<String, dynamic> e) =>
          DriveSchoolDetialJiaxiaoPhone.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialLevel1Labels>[] is M) {
      return data.map<DriveSchoolDetialLevel1Labels>((Map<String, dynamic> e) =>
          DriveSchoolDetialLevel1Labels.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialLevel2Labels>[] is M) {
      return data.map<DriveSchoolDetialLevel2Labels>((Map<String, dynamic> e) =>
          DriveSchoolDetialLevel2Labels.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialNearestField>[] is M) {
      return data.map<DriveSchoolDetialNearestField>((Map<String, dynamic> e) =>
          DriveSchoolDetialNearestField.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialPrivilegeList>[] is M) {
      return data.map<DriveSchoolDetialPrivilegeList>((
          Map<String, dynamic> e) => DriveSchoolDetialPrivilegeList.fromJson(e))
          .toList() as M;
    }
    if (<DriveSchoolDetialRank>[] is M) {
      return data.map<DriveSchoolDetialRank>((Map<String, dynamic> e) =>
          DriveSchoolDetialRank.fromJson(e)).toList() as M;
    }
    if (<DriveSchoolDetialRankCoachList>[] is M) {
      return data.map<DriveSchoolDetialRankCoachList>((
          Map<String, dynamic> e) => DriveSchoolDetialRankCoachList.fromJson(e))
          .toList() as M;
    }
    if (<FindPwdAuthEntity>[] is M) {
      return data.map<FindPwdAuthEntity>((Map<String, dynamic> e) =>
          FindPwdAuthEntity.fromJson(e)).toList() as M;
    }
    if (<JxImageListEntity>[] is M) {
      return data.map<JxImageListEntity>((Map<String, dynamic> e) =>
          JxImageListEntity.fromJson(e)).toList() as M;
    }
    if (<JxImageListItemList>[] is M) {
      return data.map<JxImageListItemList>((Map<String, dynamic> e) =>
          JxImageListItemList.fromJson(e)).toList() as M;
    }
    if (<JxImageListItemListCategorys>[] is M) {
      return data.map<JxImageListItemListCategorys>((Map<String, dynamic> e) =>
          JxImageListItemListCategorys.fromJson(e)).toList() as M;
    }
    if (<AdvertSdkDataEntity>[] is M) {
      return data.map<AdvertSdkDataEntity>((Map<String, dynamic> e) =>
          AdvertSdkDataEntity.fromJson(e)).toList() as M;
    }
    if (<AdvertSdkDataList>[] is M) {
      return data.map<AdvertSdkDataList>((Map<String, dynamic> e) =>
          AdvertSdkDataList.fromJson(e)).toList() as M;
    }
    if (<AdvertSdkDataListContent>[] is M) {
      return data.map<AdvertSdkDataListContent>((Map<String, dynamic> e) =>
          AdvertSdkDataListContent.fromJson(e)).toList() as M;
    }
    if (<AdvertSdkDataListContentAction>[] is M) {
      return data.map<AdvertSdkDataListContentAction>((
          Map<String, dynamic> e) => AdvertSdkDataListContentAction.fromJson(e))
          .toList() as M;
    }
    if (<AdvertSdkDataListOutsideStatistics>[] is M) {
      return data.map<AdvertSdkDataListOutsideStatistics>((
          Map<String, dynamic> e) =>
          AdvertSdkDataListOutsideStatistics.fromJson(e)).toList() as M;
    }
    if (<AdvertSdkDataListCtaInfo>[] is M) {
      return data.map<AdvertSdkDataListCtaInfo>((Map<String, dynamic> e) =>
          AdvertSdkDataListCtaInfo.fromJson(e)).toList() as M;
    }
    if (<MotocycleHomeDataEntity>[] is M) {
      return data.map<MotocycleHomeDataEntity>((Map<String, dynamic> e) =>
          MotocycleHomeDataEntity.fromJson(e)).toList() as M;
    }
    if (<MotocycleHomeDataItemList>[] is M) {
      return data.map<MotocycleHomeDataItemList>((Map<String, dynamic> e) =>
          MotocycleHomeDataItemList.fromJson(e)).toList() as M;
    }
    if (<MotocycleHomeDataItemListItemList>[] is M) {
      return data.map<MotocycleHomeDataItemListItemList>((
          Map<String, dynamic> e) =>
          MotocycleHomeDataItemListItemList.fromJson(e)).toList() as M;
    }
    if (<MotocycleHomeDataItemListItemListUniOperOortData>[] is M) {
      return data.map<MotocycleHomeDataItemListItemListUniOperOortData>((
          Map<String, dynamic> e) =>
          MotocycleHomeDataItemListItemListUniOperOortData.fromJson(e))
          .toList() as M;
    }
    if (<MotocycleHomeDataItemListItemListUniOperOortDataProperties>[] is M) {
      return data.map<
          MotocycleHomeDataItemListItemListUniOperOortDataProperties>((
          Map<String, dynamic> e) =>
          MotocycleHomeDataItemListItemListUniOperOortDataProperties.fromJson(
              e)).toList() as M;
    }
    if (<NCarBrandConditionDataEntity>[] is M) {
      return data.map<NCarBrandConditionDataEntity>((Map<String, dynamic> e) =>
          NCarBrandConditionDataEntity.fromJson(e)).toList() as M;
    }
    if (<NCarBrandConditionDataUniOperOortData>[] is M) {
      return data.map<NCarBrandConditionDataUniOperOortData>((
          Map<String, dynamic> e) =>
          NCarBrandConditionDataUniOperOortData.fromJson(e)).toList() as M;
    }
    if (<NCarBrandConditionDataUniOperOortDataProperties>[] is M) {
      return data.map<NCarBrandConditionDataUniOperOortDataProperties>((
          Map<String, dynamic> e) =>
          NCarBrandConditionDataUniOperOortDataProperties.fromJson(e))
          .toList() as M;
    }
    if (<NCarConditionDataEntity>[] is M) {
      return data.map<NCarConditionDataEntity>((Map<String, dynamic> e) =>
          NCarConditionDataEntity.fromJson(e)).toList() as M;
    }
    if (<NCarConditionDataItemList>[] is M) {
      return data.map<NCarConditionDataItemList>((Map<String, dynamic> e) =>
          NCarConditionDataItemList.fromJson(e)).toList() as M;
    }
    if (<NCarHotSaleDataEntity>[] is M) {
      return data.map<NCarHotSaleDataEntity>((Map<String, dynamic> e) =>
          NCarHotSaleDataEntity.fromJson(e)).toList() as M;
    }
    if (<NCarHotSaleDataItemList>[] is M) {
      return data.map<NCarHotSaleDataItemList>((Map<String, dynamic> e) =>
          NCarHotSaleDataItemList.fromJson(e)).toList() as M;
    }
    if (<NCarHotSaleDataItemListUniOperOortData>[] is M) {
      return data.map<NCarHotSaleDataItemListUniOperOortData>((
          Map<String, dynamic> e) =>
          NCarHotSaleDataItemListUniOperOortData.fromJson(e)).toList() as M;
    }
    if (<NCarHotSaleDataItemListUniOperOortDataProperties>[] is M) {
      return data.map<NCarHotSaleDataItemListUniOperOortDataProperties>((
          Map<String, dynamic> e) =>
          NCarHotSaleDataItemListUniOperOortDataProperties.fromJson(e))
          .toList() as M;
    }
    if (<NEnergyListDataEntity>[] is M) {
      return data.map<NEnergyListDataEntity>((Map<String, dynamic> e) =>
          NEnergyListDataEntity.fromJson(e)).toList() as M;
    }
    if (<NEnergyListDataBrandList>[] is M) {
      return data.map<NEnergyListDataBrandList>((Map<String, dynamic> e) =>
          NEnergyListDataBrandList.fromJson(e)).toList() as M;
    }
    if (<NEnergyListDataBrandListSeriesList>[] is M) {
      return data.map<NEnergyListDataBrandListSeriesList>((
          Map<String, dynamic> e) =>
          NEnergyListDataBrandListSeriesList.fromJson(e)).toList() as M;
    }
    if (<NcRecommand1DataEntity>[] is M) {
      return data.map<NcRecommand1DataEntity>((Map<String, dynamic> e) =>
          NcRecommand1DataEntity.fromJson(e)).toList() as M;
    }
    if (<NcRecommand1DataItemList>[] is M) {
      return data.map<NcRecommand1DataItemList>((Map<String, dynamic> e) =>
          NcRecommand1DataItemList.fromJson(e)).toList() as M;
    }
    if (<NcRecommand1DataItemListItemList>[] is M) {
      return data.map<NcRecommand1DataItemListItemList>((
          Map<String, dynamic> e) =>
          NcRecommand1DataItemListItemList.fromJson(e)).toList() as M;
    }
    if (<NcRecommand1DataItemListItemListUniOperOortData>[] is M) {
      return data.map<NcRecommand1DataItemListItemListUniOperOortData>((
          Map<String, dynamic> e) =>
          NcRecommand1DataItemListItemListUniOperOortData.fromJson(e))
          .toList() as M;
    }
    if (<NcRecommand1DataItemListItemListUniOperOortDataProperties>[] is M) {
      return data.map<
          NcRecommand1DataItemListItemListUniOperOortDataProperties>((
          Map<String, dynamic> e) =>
          NcRecommand1DataItemListItemListUniOperOortDataProperties.fromJson(e))
          .toList() as M;
    }
    if (<NcRecommand2DataEntity>[] is M) {
      return data.map<NcRecommand2DataEntity>((Map<String, dynamic> e) =>
          NcRecommand2DataEntity.fromJson(e)).toList() as M;
    }
    if (<NcRecommand2DataItemList>[] is M) {
      return data.map<NcRecommand2DataItemList>((Map<String, dynamic> e) =>
          NcRecommand2DataItemList.fromJson(e)).toList() as M;
    }
    if (<NcRecommand2DataItemListUniOperOortData>[] is M) {
      return data.map<NcRecommand2DataItemListUniOperOortData>((
          Map<String, dynamic> e) =>
          NcRecommand2DataItemListUniOperOortData.fromJson(e)).toList() as M;
    }
    if (<NcRecommand2DataItemListUniOperOortDataProperties>[] is M) {
      return data.map<NcRecommand2DataItemListUniOperOortDataProperties>((
          Map<String, dynamic> e) =>
          NcRecommand2DataItemListUniOperOortDataProperties.fromJson(e))
          .toList() as M;
    }
    if (<NcRecommand3DataEntity>[] is M) {
      return data.map<NcRecommand3DataEntity>((Map<String, dynamic> e) =>
          NcRecommand3DataEntity.fromJson(e)).toList() as M;
    }
    if (<NcRecommand3DataItemList>[] is M) {
      return data.map<NcRecommand3DataItemList>((Map<String, dynamic> e) =>
          NcRecommand3DataItemList.fromJson(e)).toList() as M;
    }
    if (<NcarListDataEntity>[] is M) {
      return data.map<NcarListDataEntity>((Map<String, dynamic> e) =>
          NcarListDataEntity.fromJson(e)).toList() as M;
    }
    if (<NcarListDataBrandList>[] is M) {
      return data.map<NcarListDataBrandList>((Map<String, dynamic> e) =>
          NcarListDataBrandList.fromJson(e)).toList() as M;
    }
    if (<UCarListItemEntity>[] is M) {
      return data.map<UCarListItemEntity>((Map<String, dynamic> e) =>
          UCarListItemEntity.fromJson(e)).toList() as M;
    }
    if (<UCarListItemItemList>[] is M) {
      return data.map<UCarListItemItemList>((Map<String, dynamic> e) =>
          UCarListItemItemList.fromJson(e)).toList() as M;
    }
    if (<UCarListItemItemListImage>[] is M) {
      return data.map<UCarListItemItemListImage>((Map<String, dynamic> e) =>
          UCarListItemItemListImage.fromJson(e)).toList() as M;
    }
    if (<UCarListItemItemListImages>[] is M) {
      return data.map<UCarListItemItemListImages>((Map<String, dynamic> e) =>
          UCarListItemItemListImages.fromJson(e)).toList() as M;
    }
    if (<UCarListItemItemListSellerInfo>[] is M) {
      return data.map<UCarListItemItemListSellerInfo>((
          Map<String, dynamic> e) => UCarListItemItemListSellerInfo.fromJson(e))
          .toList() as M;
    }
    if (<UCarListItemItemListLabels>[] is M) {
      return data.map<UCarListItemItemListLabels>((Map<String, dynamic> e) =>
          UCarListItemItemListLabels.fromJson(e)).toList() as M;
    }
    if (<UCarRecommandItemEntity>[] is M) {
      return data.map<UCarRecommandItemEntity>((Map<String, dynamic> e) =>
          UCarRecommandItemEntity.fromJson(e)).toList() as M;
    }
    if (<UCarRecommandItemItemList>[] is M) {
      return data.map<UCarRecommandItemItemList>((Map<String, dynamic> e) =>
          UCarRecommandItemItemList.fromJson(e)).toList() as M;
    }
    if (<UCarRecommandItemItemListImage>[] is M) {
      return data.map<UCarRecommandItemItemListImage>((
          Map<String, dynamic> e) => UCarRecommandItemItemListImage.fromJson(e))
          .toList() as M;
    }
    if (<UCarRecommandItemItemListImages>[] is M) {
      return data.map<UCarRecommandItemItemListImages>((
          Map<String, dynamic> e) =>
          UCarRecommandItemItemListImages.fromJson(e)).toList() as M;
    }
    if (<UCarRecommandItemItemListSellerInfo>[] is M) {
      return data.map<UCarRecommandItemItemListSellerInfo>((
          Map<String, dynamic> e) =>
          UCarRecommandItemItemListSellerInfo.fromJson(e)).toList() as M;
    }
    if (<UCarRecommandItemItemListLabels>[] is M) {
      return data.map<UCarRecommandItemItemListLabels>((
          Map<String, dynamic> e) =>
          UCarRecommandItemItemListLabels.fromJson(e)).toList() as M;
    }
    if (<HomeCoachFilterEntity>[] is M) {
      return data.map<HomeCoachFilterEntity>((Map<String, dynamic> e) =>
          HomeCoachFilterEntity.fromJson(e)).toList() as M;
    }
    if (<HomeCoachFilterItemList>[] is M) {
      return data.map<HomeCoachFilterItemList>((Map<String, dynamic> e) =>
          HomeCoachFilterItemList.fromJson(e)).toList() as M;
    }
    if (<HomeCoachFilterItemListActivity>[] is M) {
      return data.map<HomeCoachFilterItemListActivity>((
          Map<String, dynamic> e) =>
          HomeCoachFilterItemListActivity.fromJson(e)).toList() as M;
    }
    if (<HomeCoachFilterItemListCourseObject>[] is M) {
      return data.map<HomeCoachFilterItemListCourseObject>((
          Map<String, dynamic> e) =>
          HomeCoachFilterItemListCourseObject.fromJson(e)).toList() as M;
    }
    if (<HomeFilterLabelEntity>[] is M) {
      return data.map<HomeFilterLabelEntity>((Map<String, dynamic> e) =>
          HomeFilterLabelEntity.fromJson(e)).toList() as M;
    }
    if (<HomeFilterLabelItemList>[] is M) {
      return data.map<HomeFilterLabelItemList>((Map<String, dynamic> e) =>
          HomeFilterLabelItemList.fromJson(e)).toList() as M;
    }
    if (<HomeFilterSchoolEntity>[] is M) {
      return data.map<HomeFilterSchoolEntity>((Map<String, dynamic> e) =>
          HomeFilterSchoolEntity.fromJson(e)).toList() as M;
    }
    if (<HomeFilterSchoolItemList>[] is M) {
      return data.map<HomeFilterSchoolItemList>((Map<String, dynamic> e) =>
          HomeFilterSchoolItemList.fromJson(e)).toList() as M;
    }
    if (<HomeFilterSchoolItemListActivity>[] is M) {
      return data.map<HomeFilterSchoolItemListActivity>((
          Map<String, dynamic> e) =>
          HomeFilterSchoolItemListActivity.fromJson(e)).toList() as M;
    }
    if (<HomeFilterSchoolItemListCourseObject>[] is M) {
      return data.map<HomeFilterSchoolItemListCourseObject>((
          Map<String, dynamic> e) =>
          HomeFilterSchoolItemListCourseObject.fromJson(e)).toList() as M;
    }
    if (<HomeFilterSchoolItemListJiaxiaoPhone>[] is M) {
      return data.map<HomeFilterSchoolItemListJiaxiaoPhone>((
          Map<String, dynamic> e) =>
          HomeFilterSchoolItemListJiaxiaoPhone.fromJson(e)).toList() as M;
    }
    if (<HomeFilterSchoolItemListLabelObjects>[] is M) {
      return data.map<HomeFilterSchoolItemListLabelObjects>((
          Map<String, dynamic> e) =>
          HomeFilterSchoolItemListLabelObjects.fromJson(e)).toList() as M;
    }
    if (<HomeQueryToastEntity>[] is M) {
      return data.map<HomeQueryToastEntity>((Map<String, dynamic> e) =>
          HomeQueryToastEntity.fromJson(e)).toList() as M;
    }
    if (<HomeSchoolAdEntity>[] is M) {
      return data.map<HomeSchoolAdEntity>((Map<String, dynamic> e) =>
          HomeSchoolAdEntity.fromJson(e)).toList() as M;
    }
    if (<HomeSchoolAdItemList>[] is M) {
      return data.map<HomeSchoolAdItemList>((Map<String, dynamic> e) =>
          HomeSchoolAdItemList.fromJson(e)).toList() as M;
    }
    if (<HomeSchoolAdItemListCourseObject>[] is M) {
      return data.map<HomeSchoolAdItemListCourseObject>((
          Map<String, dynamic> e) =>
          HomeSchoolAdItemListCourseObject.fromJson(e)).toList() as M;
    }
    if (<HomeSchoolAdItemListJiaxiaoPhone>[] is M) {
      return data.map<HomeSchoolAdItemListJiaxiaoPhone>((
          Map<String, dynamic> e) =>
          HomeSchoolAdItemListJiaxiaoPhone.fromJson(e)).toList() as M;
    }
    if (<HomeTabEntity>[] is M) {
      return data.map<HomeTabEntity>((Map<String, dynamic> e) =>
          HomeTabEntity.fromJson(e)).toList() as M;
    }
    if (<HomeTabItemList>[] is M) {
      return data.map<HomeTabItemList>((Map<String, dynamic> e) =>
          HomeTabItemList.fromJson(e)).toList() as M;
    }
    if (<ImageItemEntity>[] is M) {
      return data.map<ImageItemEntity>((Map<String, dynamic> e) =>
          ImageItemEntity.fromJson(e)).toList() as M;
    }
    if (<BadgeEntity>[] is M) {
      return data.map<BadgeEntity>((Map<String, dynamic> e) =>
          BadgeEntity.fromJson(e)).toList() as M;
    }
    if (<MineRGoodEntity>[] is M) {
      return data.map<MineRGoodEntity>((Map<String, dynamic> e) =>
          MineRGoodEntity.fromJson(e)).toList() as M;
    }
    if (<MineRGoodItemList>[] is M) {
      return data.map<MineRGoodItemList>((Map<String, dynamic> e) =>
          MineRGoodItemList.fromJson(e)).toList() as M;
    }
    if (<MineRGoodItemListChannelGoodsPrice>[] is M) {
      return data.map<MineRGoodItemListChannelGoodsPrice>((
          Map<String, dynamic> e) =>
          MineRGoodItemListChannelGoodsPrice.fromJson(e)).toList() as M;
    }
    if (<MineRGoodItemListChannelGoodsPriceGoods>[] is M) {
      return data.map<MineRGoodItemListChannelGoodsPriceGoods>((
          Map<String, dynamic> e) =>
          MineRGoodItemListChannelGoodsPriceGoods.fromJson(e)).toList() as M;
    }
    if (<MineRGoodItemListChannelGoodsPriceUserBoughtInfo>[] is M) {
      return data.map<MineRGoodItemListChannelGoodsPriceUserBoughtInfo>((
          Map<String, dynamic> e) =>
          MineRGoodItemListChannelGoodsPriceUserBoughtInfo.fromJson(e))
          .toList() as M;
    }
    if (<MineRGoodItemListUiConfig>[] is M) {
      return data.map<MineRGoodItemListUiConfig>((Map<String, dynamic> e) =>
          MineRGoodItemListUiConfig.fromJson(e)).toList() as M;
    }
    if (<MineRGoodItemListUiConfigHighlightDescList>[] is M) {
      return data.map<MineRGoodItemListUiConfigHighlightDescList>((
          Map<String, dynamic> e) =>
          MineRGoodItemListUiConfigHighlightDescList.fromJson(e)).toList() as M;
    }
    if (<TabItemEntity>[] is M) {
      return data.map<TabItemEntity>((Map<String, dynamic> e) =>
          TabItemEntity.fromJson(e)).toList() as M;
    }
    if (<TabMineBannerEntity>[] is M) {
      return data.map<TabMineBannerEntity>((Map<String, dynamic> e) =>
          TabMineBannerEntity.fromJson(e)).toList() as M;
    }
    if (<TabMineBannerItemList>[] is M) {
      return data.map<TabMineBannerItemList>((Map<String, dynamic> e) =>
          TabMineBannerItemList.fromJson(e)).toList() as M;
    }
    if (<TabMineBannerItemListPriceCompareInfo>[] is M) {
      return data.map<TabMineBannerItemListPriceCompareInfo>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListPriceCompareInfo.fromJson(e)).toList() as M;
    }
    if (<TabMineBannerItemListPriceCompareInfoPriceCompareList>[] is M) {
      return data.map<TabMineBannerItemListPriceCompareInfoPriceCompareList>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListPriceCompareInfoPriceCompareList.fromJson(e))
          .toList() as M;
    }
    if (<TabMineBannerItemListPriceCompareInfoPriceCompareListUserBoughtInfo>[
    ] is M) {
      return data.map<
          TabMineBannerItemListPriceCompareInfoPriceCompareListUserBoughtInfo>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListPriceCompareInfoPriceCompareListUserBoughtInfo
              .fromJson(e)).toList() as M;
    }
    if (<TabMineBannerItemListPromotion>[] is M) {
      return data.map<TabMineBannerItemListPromotion>((
          Map<String, dynamic> e) => TabMineBannerItemListPromotion.fromJson(e))
          .toList() as M;
    }
    if (<TabMineBannerItemListRecommendGoods>[] is M) {
      return data.map<TabMineBannerItemListRecommendGoods>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListRecommendGoods.fromJson(e)).toList() as M;
    }
    if (<TabMineBannerItemListRecommendGoodsChannelGoodsPrice>[] is M) {
      return data.map<TabMineBannerItemListRecommendGoodsChannelGoodsPrice>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListRecommendGoodsChannelGoodsPrice.fromJson(e))
          .toList() as M;
    }
    if (<TabMineBannerItemListRecommendGoodsChannelGoodsPriceGoods>[] is M) {
      return data.map<
          TabMineBannerItemListRecommendGoodsChannelGoodsPriceGoods>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListRecommendGoodsChannelGoodsPriceGoods.fromJson(e))
          .toList() as M;
    }
    if (<TabMineBannerItemListRecommendGoodsChannelGoodsPriceUserBoughtInfo>[
    ] is M) {
      return data.map<
          TabMineBannerItemListRecommendGoodsChannelGoodsPriceUserBoughtInfo>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListRecommendGoodsChannelGoodsPriceUserBoughtInfo
              .fromJson(e)).toList() as M;
    }
    if (<TabMineBannerItemListRecommendGoodsUiConfig>[] is M) {
      return data.map<TabMineBannerItemListRecommendGoodsUiConfig>((
          Map<String, dynamic> e) =>
          TabMineBannerItemListRecommendGoodsUiConfig.fromJson(e))
          .toList() as M;
    }
    if (<CommunityDataEntity>[] is M) {
      return data.map<CommunityDataEntity>((Map<String, dynamic> e) =>
          CommunityDataEntity.fromJson(e)).toList() as M;
    }
    if (<CommunityDataExtraData>[] is M) {
      return data.map<CommunityDataExtraData>((Map<String, dynamic> e) =>
          CommunityDataExtraData.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemList>[] is M) {
      return data.map<CommunityDataItemList>((Map<String, dynamic> e) =>
          CommunityDataItemList.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListAuthor>[] is M) {
      return data.map<CommunityDataItemListAuthor>((Map<String, dynamic> e) =>
          CommunityDataItemListAuthor.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListAuthorBusinessIdentityList>[] is M) {
      return data.map<CommunityDataItemListAuthorBusinessIdentityList>((
          Map<String, dynamic> e) =>
          CommunityDataItemListAuthorBusinessIdentityList.fromJson(e))
          .toList() as M;
    }
    if (<CommunityDataItemListImageList>[] is M) {
      return data.map<CommunityDataItemListImageList>((
          Map<String, dynamic> e) => CommunityDataItemListImageList.fromJson(e))
          .toList() as M;
    }
    if (<CommunityDataItemListImageListDetail>[] is M) {
      return data.map<CommunityDataItemListImageListDetail>((
          Map<String, dynamic> e) =>
          CommunityDataItemListImageListDetail.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListImageListList>[] is M) {
      return data.map<CommunityDataItemListImageListList>((
          Map<String, dynamic> e) =>
          CommunityDataItemListImageListList.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListServiceList>[] is M) {
      return data.map<CommunityDataItemListServiceList>((
          Map<String, dynamic> e) =>
          CommunityDataItemListServiceList.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListTagList>[] is M) {
      return data.map<CommunityDataItemListTagList>((Map<String, dynamic> e) =>
          CommunityDataItemListTagList.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListTagListConfig>[] is M) {
      return data.map<CommunityDataItemListTagListConfig>((
          Map<String, dynamic> e) =>
          CommunityDataItemListTagListConfig.fromJson(e)).toList() as M;
    }
    if (<CommunityDataItemListTagListExtraData>[] is M) {
      return data.map<CommunityDataItemListTagListExtraData>((
          Map<String, dynamic> e) =>
          CommunityDataItemListTagListExtraData.fromJson(e)).toList() as M;
    }
    if (<MessageDataEntity>[] is M) {
      return data.map<MessageDataEntity>((Map<String, dynamic> e) =>
          MessageDataEntity.fromJson(e)).toList() as M;
    }
    if (<MessageDataItemList>[] is M) {
      return data.map<MessageDataItemList>((Map<String, dynamic> e) =>
          MessageDataItemList.fromJson(e)).toList() as M;
    }
    if (<MessageDataItemListAction>[] is M) {
      return data.map<MessageDataItemListAction>((Map<String, dynamic> e) =>
          MessageDataItemListAction.fromJson(e)).toList() as M;
    }
    if (<MessageDataItemListWeMediaProfile>[] is M) {
      return data.map<MessageDataItemListWeMediaProfile>((
          Map<String, dynamic> e) =>
          MessageDataItemListWeMediaProfile.fromJson(e)).toList() as M;
    }
    if (<MessageDataItemListContent>[] is M) {
      return data.map<MessageDataItemListContent>((Map<String, dynamic> e) =>
          MessageDataItemListContent.fromJson(e)).toList() as M;
    }
    if (<LessonBannerEntity>[] is M) {
      return data.map<LessonBannerEntity>((Map<String, dynamic> e) =>
          LessonBannerEntity.fromJson(e)).toList() as M;
    }
    if (<LessonBannerItemList>[] is M) {
      return data.map<LessonBannerItemList>((Map<String, dynamic> e) =>
          LessonBannerItemList.fromJson(e)).toList() as M;
    }
    if (<VideoLessonEntity>[] is M) {
      return data.map<VideoLessonEntity>((Map<String, dynamic> e) =>
          VideoLessonEntity.fromJson(e)).toList() as M;
    }
    if (<VideoLessonExcellentItemLessonList>[] is M) {
      return data.map<VideoLessonExcellentItemLessonList>((
          Map<String, dynamic> e) =>
          VideoLessonExcellentItemLessonList.fromJson(e)).toList() as M;
    }
    if (<VideoLessonExcellentItemLessonListTopLessonListData>[] is M) {
      return data.map<VideoLessonExcellentItemLessonListTopLessonListData>((
          Map<String, dynamic> e) =>
          VideoLessonExcellentItemLessonListTopLessonListData.fromJson(e))
          .toList() as M;
    }
    if (<VideoLessonExcellentItemLessonListTopLessonListDataTeacherList>[
    ] is M) {
      return data.map<
          VideoLessonExcellentItemLessonListTopLessonListDataTeacherList>((
          Map<String, dynamic> e) =>
          VideoLessonExcellentItemLessonListTopLessonListDataTeacherList
              .fromJson(e)).toList() as M;
    }
    if (<VideoLessonExcellentItemLessonListTopLessonListDataTrialLesson>[
    ] is M) {
      return data.map<
          VideoLessonExcellentItemLessonListTopLessonListDataTrialLesson>((
          Map<String, dynamic> e) =>
          VideoLessonExcellentItemLessonListTopLessonListDataTrialLesson
              .fromJson(e)).toList() as M;
    }
    if (<VideoLessonOtherLessonList>[] is M) {
      return data.map<VideoLessonOtherLessonList>((Map<String, dynamic> e) =>
          VideoLessonOtherLessonList.fromJson(e)).toList() as M;
    }
    if (<VideoLessonOtherLessonListTeacherList>[] is M) {
      return data.map<VideoLessonOtherLessonListTeacherList>((
          Map<String, dynamic> e) =>
          VideoLessonOtherLessonListTeacherList.fromJson(e)).toList() as M;
    }
    if (<VideoLessonOtherLessonListTrialLesson>[] is M) {
      return data.map<VideoLessonOtherLessonListTrialLesson>((
          Map<String, dynamic> e) =>
          VideoLessonOtherLessonListTrialLesson.fromJson(e)).toList() as M;
    }
    if (<VideoLessonRecommendLessonList>[] is M) {
      return data.map<VideoLessonRecommendLessonList>((
          Map<String, dynamic> e) => VideoLessonRecommendLessonList.fromJson(e))
          .toList() as M;
    }
    if (<VideoLessonRecommendLessonListTeacherList>[] is M) {
      return data.map<VideoLessonRecommendLessonListTeacherList>((
          Map<String, dynamic> e) =>
          VideoLessonRecommendLessonListTeacherList.fromJson(e)).toList() as M;
    }
    if (<VideoLessonRecommendLessonListTrialLesson>[] is M) {
      return data.map<VideoLessonRecommendLessonListTrialLesson>((
          Map<String, dynamic> e) =>
          VideoLessonRecommendLessonListTrialLesson.fromJson(e)).toList() as M;
    }
    if (<VideoCalendarEntity>[] is M) {
      return data.map<VideoCalendarEntity>((Map<String, dynamic> e) =>
          VideoCalendarEntity.fromJson(e)).toList() as M;
    }
    if (<VideoManagerItemList>[] is M) {
      return data.map<VideoManagerItemList>((Map<String, dynamic> e) =>
          VideoManagerItemList.fromJson(e)).toList() as M;
    }
    if (<VideoSquareEntity>[] is M) {
      return data.map<VideoSquareEntity>((Map<String, dynamic> e) =>
          VideoSquareEntity.fromJson(e)).toList() as M;
    }
    if (<VideoSquareItemList>[] is M) {
      return data.map<VideoSquareItemList>((Map<String, dynamic> e) =>
          VideoSquareItemList.fromJson(e)).toList() as M;
    }
    if (<VideoSquareItemListAnchorData>[] is M) {
      return data.map<VideoSquareItemListAnchorData>((Map<String, dynamic> e) =>
          VideoSquareItemListAnchorData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (CoachFilterConditionEntity).toString(): CoachFilterConditionEntity
        .fromJson,
    (CoachFilterConditionBusTeachTypeList)
        .toString(): CoachFilterConditionBusTeachTypeList.fromJson,
    (CoachFilterConditionCountyList).toString(): CoachFilterConditionCountyList
        .fromJson,
    (CoachFilterConditionCourseClassList)
        .toString(): CoachFilterConditionCourseClassList.fromJson,
    (CoachFilterConditionDistanceSearchList)
        .toString(): CoachFilterConditionDistanceSearchList.fromJson,
    (CoachFilterConditionIntelligentLabelList)
        .toString(): CoachFilterConditionIntelligentLabelList.fromJson,
    (CoachFilterConditionLabelList).toString(): CoachFilterConditionLabelList
        .fromJson,
    (CoachFilterConditionMarketTypeList)
        .toString(): CoachFilterConditionMarketTypeList.fromJson,
    (CoachFilterConditionMiniCarTeachTypeList)
        .toString(): CoachFilterConditionMiniCarTeachTypeList.fromJson,
    (CoachFilterConditionMotoTeachTypeList)
        .toString(): CoachFilterConditionMotoTeachTypeList.fromJson,
    (CoachFilterConditionOtherTeachTypeList)
        .toString(): CoachFilterConditionOtherTeachTypeList.fromJson,
    (CoachFilterConditionTeachTypeDetailList)
        .toString(): CoachFilterConditionTeachTypeDetailList.fromJson,
    (CoachFilterConditionTruckTeachTypeList)
        .toString(): CoachFilterConditionTruckTeachTypeList.fromJson,
    (DianPingPrewEntity).toString(): DianPingPrewEntity.fromJson,
    (DianPingPrewItemList).toString(): DianPingPrewItemList.fromJson,
    (DianPingPrewItemListAuthor).toString(): DianPingPrewItemListAuthor
        .fromJson,
    (DianPingPrewItemListImageList).toString(): DianPingPrewItemListImageList
        .fromJson,
    (DriveSchoolDetialEntity).toString(): DriveSchoolDetialEntity.fromJson,
    (DriveSchoolDetialBrandPrivileges)
        .toString(): DriveSchoolDetialBrandPrivileges.fromJson,
    (DriveSchoolDetialCourses).toString(): DriveSchoolDetialCourses.fromJson,
    (DriveSchoolDetialCoverGroupList)
        .toString(): DriveSchoolDetialCoverGroupList.fromJson,
    (DriveSchoolDetialCoverGroupListCoverList)
        .toString(): DriveSchoolDetialCoverGroupListCoverList.fromJson,
    (DriveSchoolDetialCoverList).toString(): DriveSchoolDetialCoverList
        .fromJson,
    (DriveSchoolDetialDetailDto).toString(): DriveSchoolDetialDetailDto
        .fromJson,
    (DriveSchoolDetialDianping).toString(): DriveSchoolDetialDianping.fromJson,
    (DriveSchoolDetialDianpingCommentCountDataList)
        .toString(): DriveSchoolDetialDianpingCommentCountDataList.fromJson,
    (DriveSchoolDetialDianpingTagList)
        .toString(): DriveSchoolDetialDianpingTagList.fromJson,
    (DriveSchoolDetialFieldList).toString(): DriveSchoolDetialFieldList
        .fromJson,
    (DriveSchoolDetialJiaxiaoPhone).toString(): DriveSchoolDetialJiaxiaoPhone
        .fromJson,
    (DriveSchoolDetialLevel1Labels).toString(): DriveSchoolDetialLevel1Labels
        .fromJson,
    (DriveSchoolDetialLevel2Labels).toString(): DriveSchoolDetialLevel2Labels
        .fromJson,
    (DriveSchoolDetialNearestField).toString(): DriveSchoolDetialNearestField
        .fromJson,
    (DriveSchoolDetialPrivilegeList).toString(): DriveSchoolDetialPrivilegeList
        .fromJson,
    (DriveSchoolDetialRank).toString(): DriveSchoolDetialRank.fromJson,
    (DriveSchoolDetialRankCoachList).toString(): DriveSchoolDetialRankCoachList
        .fromJson,
    (FindPwdAuthEntity).toString(): FindPwdAuthEntity.fromJson,
    (JxImageListEntity).toString(): JxImageListEntity.fromJson,
    (JxImageListItemList).toString(): JxImageListItemList.fromJson,
    (JxImageListItemListCategorys).toString(): JxImageListItemListCategorys
        .fromJson,
    (AdvertSdkDataEntity).toString(): AdvertSdkDataEntity.fromJson,
    (AdvertSdkDataList).toString(): AdvertSdkDataList.fromJson,
    (AdvertSdkDataListContent).toString(): AdvertSdkDataListContent.fromJson,
    (AdvertSdkDataListContentAction).toString(): AdvertSdkDataListContentAction
        .fromJson,
    (AdvertSdkDataListOutsideStatistics)
        .toString(): AdvertSdkDataListOutsideStatistics.fromJson,
    (AdvertSdkDataListCtaInfo).toString(): AdvertSdkDataListCtaInfo.fromJson,
    (MotocycleHomeDataEntity).toString(): MotocycleHomeDataEntity.fromJson,
    (MotocycleHomeDataItemList).toString(): MotocycleHomeDataItemList.fromJson,
    (MotocycleHomeDataItemListItemList)
        .toString(): MotocycleHomeDataItemListItemList.fromJson,
    (MotocycleHomeDataItemListItemListUniOperOortData)
        .toString(): MotocycleHomeDataItemListItemListUniOperOortData.fromJson,
    (MotocycleHomeDataItemListItemListUniOperOortDataProperties)
        .toString(): MotocycleHomeDataItemListItemListUniOperOortDataProperties
        .fromJson,
    (NCarBrandConditionDataEntity).toString(): NCarBrandConditionDataEntity
        .fromJson,
    (NCarBrandConditionDataUniOperOortData)
        .toString(): NCarBrandConditionDataUniOperOortData.fromJson,
    (NCarBrandConditionDataUniOperOortDataProperties)
        .toString(): NCarBrandConditionDataUniOperOortDataProperties.fromJson,
    (NCarConditionDataEntity).toString(): NCarConditionDataEntity.fromJson,
    (NCarConditionDataItemList).toString(): NCarConditionDataItemList.fromJson,
    (NCarHotSaleDataEntity).toString(): NCarHotSaleDataEntity.fromJson,
    (NCarHotSaleDataItemList).toString(): NCarHotSaleDataItemList.fromJson,
    (NCarHotSaleDataItemListUniOperOortData)
        .toString(): NCarHotSaleDataItemListUniOperOortData.fromJson,
    (NCarHotSaleDataItemListUniOperOortDataProperties)
        .toString(): NCarHotSaleDataItemListUniOperOortDataProperties.fromJson,
    (NEnergyListDataEntity).toString(): NEnergyListDataEntity.fromJson,
    (NEnergyListDataBrandList).toString(): NEnergyListDataBrandList.fromJson,
    (NEnergyListDataBrandListSeriesList)
        .toString(): NEnergyListDataBrandListSeriesList.fromJson,
    (NcRecommand1DataEntity).toString(): NcRecommand1DataEntity.fromJson,
    (NcRecommand1DataItemList).toString(): NcRecommand1DataItemList.fromJson,
    (NcRecommand1DataItemListItemList)
        .toString(): NcRecommand1DataItemListItemList.fromJson,
    (NcRecommand1DataItemListItemListUniOperOortData)
        .toString(): NcRecommand1DataItemListItemListUniOperOortData.fromJson,
    (NcRecommand1DataItemListItemListUniOperOortDataProperties)
        .toString(): NcRecommand1DataItemListItemListUniOperOortDataProperties
        .fromJson,
    (NcRecommand2DataEntity).toString(): NcRecommand2DataEntity.fromJson,
    (NcRecommand2DataItemList).toString(): NcRecommand2DataItemList.fromJson,
    (NcRecommand2DataItemListUniOperOortData)
        .toString(): NcRecommand2DataItemListUniOperOortData.fromJson,
    (NcRecommand2DataItemListUniOperOortDataProperties)
        .toString(): NcRecommand2DataItemListUniOperOortDataProperties.fromJson,
    (NcRecommand3DataEntity).toString(): NcRecommand3DataEntity.fromJson,
    (NcRecommand3DataItemList).toString(): NcRecommand3DataItemList.fromJson,
    (NcarListDataEntity).toString(): NcarListDataEntity.fromJson,
    (NcarListDataBrandList).toString(): NcarListDataBrandList.fromJson,
    (UCarListItemEntity).toString(): UCarListItemEntity.fromJson,
    (UCarListItemItemList).toString(): UCarListItemItemList.fromJson,
    (UCarListItemItemListImage).toString(): UCarListItemItemListImage.fromJson,
    (UCarListItemItemListImages).toString(): UCarListItemItemListImages
        .fromJson,
    (UCarListItemItemListSellerInfo).toString(): UCarListItemItemListSellerInfo
        .fromJson,
    (UCarListItemItemListLabels).toString(): UCarListItemItemListLabels
        .fromJson,
    (UCarRecommandItemEntity).toString(): UCarRecommandItemEntity.fromJson,
    (UCarRecommandItemItemList).toString(): UCarRecommandItemItemList.fromJson,
    (UCarRecommandItemItemListImage).toString(): UCarRecommandItemItemListImage
        .fromJson,
    (UCarRecommandItemItemListImages)
        .toString(): UCarRecommandItemItemListImages.fromJson,
    (UCarRecommandItemItemListSellerInfo)
        .toString(): UCarRecommandItemItemListSellerInfo.fromJson,
    (UCarRecommandItemItemListLabels)
        .toString(): UCarRecommandItemItemListLabels.fromJson,
    (HomeCoachFilterEntity).toString(): HomeCoachFilterEntity.fromJson,
    (HomeCoachFilterItemList).toString(): HomeCoachFilterItemList.fromJson,
    (HomeCoachFilterItemListActivity)
        .toString(): HomeCoachFilterItemListActivity.fromJson,
    (HomeCoachFilterItemListCourseObject)
        .toString(): HomeCoachFilterItemListCourseObject.fromJson,
    (HomeFilterLabelEntity).toString(): HomeFilterLabelEntity.fromJson,
    (HomeFilterLabelItemList).toString(): HomeFilterLabelItemList.fromJson,
    (HomeFilterSchoolEntity).toString(): HomeFilterSchoolEntity.fromJson,
    (HomeFilterSchoolItemList).toString(): HomeFilterSchoolItemList.fromJson,
    (HomeFilterSchoolItemListActivity)
        .toString(): HomeFilterSchoolItemListActivity.fromJson,
    (HomeFilterSchoolItemListCourseObject)
        .toString(): HomeFilterSchoolItemListCourseObject.fromJson,
    (HomeFilterSchoolItemListJiaxiaoPhone)
        .toString(): HomeFilterSchoolItemListJiaxiaoPhone.fromJson,
    (HomeFilterSchoolItemListLabelObjects)
        .toString(): HomeFilterSchoolItemListLabelObjects.fromJson,
    (HomeQueryToastEntity).toString(): HomeQueryToastEntity.fromJson,
    (HomeSchoolAdEntity).toString(): HomeSchoolAdEntity.fromJson,
    (HomeSchoolAdItemList).toString(): HomeSchoolAdItemList.fromJson,
    (HomeSchoolAdItemListCourseObject)
        .toString(): HomeSchoolAdItemListCourseObject.fromJson,
    (HomeSchoolAdItemListJiaxiaoPhone)
        .toString(): HomeSchoolAdItemListJiaxiaoPhone.fromJson,
    (HomeTabEntity).toString(): HomeTabEntity.fromJson,
    (HomeTabItemList).toString(): HomeTabItemList.fromJson,
    (ImageItemEntity).toString(): ImageItemEntity.fromJson,
    (BadgeEntity).toString(): BadgeEntity.fromJson,
    (MineRGoodEntity).toString(): MineRGoodEntity.fromJson,
    (MineRGoodItemList).toString(): MineRGoodItemList.fromJson,
    (MineRGoodItemListChannelGoodsPrice)
        .toString(): MineRGoodItemListChannelGoodsPrice.fromJson,
    (MineRGoodItemListChannelGoodsPriceGoods)
        .toString(): MineRGoodItemListChannelGoodsPriceGoods.fromJson,
    (MineRGoodItemListChannelGoodsPriceUserBoughtInfo)
        .toString(): MineRGoodItemListChannelGoodsPriceUserBoughtInfo.fromJson,
    (MineRGoodItemListUiConfig).toString(): MineRGoodItemListUiConfig.fromJson,
    (MineRGoodItemListUiConfigHighlightDescList)
        .toString(): MineRGoodItemListUiConfigHighlightDescList.fromJson,
    (TabItemEntity).toString(): TabItemEntity.fromJson,
    (TabMineBannerEntity).toString(): TabMineBannerEntity.fromJson,
    (TabMineBannerItemList).toString(): TabMineBannerItemList.fromJson,
    (TabMineBannerItemListPriceCompareInfo)
        .toString(): TabMineBannerItemListPriceCompareInfo.fromJson,
    (TabMineBannerItemListPriceCompareInfoPriceCompareList)
        .toString(): TabMineBannerItemListPriceCompareInfoPriceCompareList
        .fromJson,
    (TabMineBannerItemListPriceCompareInfoPriceCompareListUserBoughtInfo)
        .toString(): TabMineBannerItemListPriceCompareInfoPriceCompareListUserBoughtInfo
        .fromJson,
    (TabMineBannerItemListPromotion).toString(): TabMineBannerItemListPromotion
        .fromJson,
    (TabMineBannerItemListRecommendGoods)
        .toString(): TabMineBannerItemListRecommendGoods.fromJson,
    (TabMineBannerItemListRecommendGoodsChannelGoodsPrice)
        .toString(): TabMineBannerItemListRecommendGoodsChannelGoodsPrice
        .fromJson,
    (TabMineBannerItemListRecommendGoodsChannelGoodsPriceGoods)
        .toString(): TabMineBannerItemListRecommendGoodsChannelGoodsPriceGoods
        .fromJson,
    (TabMineBannerItemListRecommendGoodsChannelGoodsPriceUserBoughtInfo)
        .toString(): TabMineBannerItemListRecommendGoodsChannelGoodsPriceUserBoughtInfo
        .fromJson,
    (TabMineBannerItemListRecommendGoodsUiConfig)
        .toString(): TabMineBannerItemListRecommendGoodsUiConfig.fromJson,
    (CommunityDataEntity).toString(): CommunityDataEntity.fromJson,
    (CommunityDataExtraData).toString(): CommunityDataExtraData.fromJson,
    (CommunityDataItemList).toString(): CommunityDataItemList.fromJson,
    (CommunityDataItemListAuthor).toString(): CommunityDataItemListAuthor
        .fromJson,
    (CommunityDataItemListAuthorBusinessIdentityList)
        .toString(): CommunityDataItemListAuthorBusinessIdentityList.fromJson,
    (CommunityDataItemListImageList).toString(): CommunityDataItemListImageList
        .fromJson,
    (CommunityDataItemListImageListDetail)
        .toString(): CommunityDataItemListImageListDetail.fromJson,
    (CommunityDataItemListImageListList)
        .toString(): CommunityDataItemListImageListList.fromJson,
    (CommunityDataItemListServiceList)
        .toString(): CommunityDataItemListServiceList.fromJson,
    (CommunityDataItemListTagList).toString(): CommunityDataItemListTagList
        .fromJson,
    (CommunityDataItemListTagListConfig)
        .toString(): CommunityDataItemListTagListConfig.fromJson,
    (CommunityDataItemListTagListExtraData)
        .toString(): CommunityDataItemListTagListExtraData.fromJson,
    (MessageDataEntity).toString(): MessageDataEntity.fromJson,
    (MessageDataItemList).toString(): MessageDataItemList.fromJson,
    (MessageDataItemListAction).toString(): MessageDataItemListAction.fromJson,
    (MessageDataItemListWeMediaProfile)
        .toString(): MessageDataItemListWeMediaProfile.fromJson,
    (MessageDataItemListContent).toString(): MessageDataItemListContent
        .fromJson,
    (LessonBannerEntity).toString(): LessonBannerEntity.fromJson,
    (LessonBannerItemList).toString(): LessonBannerItemList.fromJson,
    (VideoLessonEntity).toString(): VideoLessonEntity.fromJson,
    (VideoLessonExcellentItemLessonList)
        .toString(): VideoLessonExcellentItemLessonList.fromJson,
    (VideoLessonExcellentItemLessonListTopLessonListData)
        .toString(): VideoLessonExcellentItemLessonListTopLessonListData
        .fromJson,
    (VideoLessonExcellentItemLessonListTopLessonListDataTeacherList)
        .toString(): VideoLessonExcellentItemLessonListTopLessonListDataTeacherList
        .fromJson,
    (VideoLessonExcellentItemLessonListTopLessonListDataTrialLesson)
        .toString(): VideoLessonExcellentItemLessonListTopLessonListDataTrialLesson
        .fromJson,
    (VideoLessonOtherLessonList).toString(): VideoLessonOtherLessonList
        .fromJson,
    (VideoLessonOtherLessonListTeacherList)
        .toString(): VideoLessonOtherLessonListTeacherList.fromJson,
    (VideoLessonOtherLessonListTrialLesson)
        .toString(): VideoLessonOtherLessonListTrialLesson.fromJson,
    (VideoLessonRecommendLessonList).toString(): VideoLessonRecommendLessonList
        .fromJson,
    (VideoLessonRecommendLessonListTeacherList)
        .toString(): VideoLessonRecommendLessonListTeacherList.fromJson,
    (VideoLessonRecommendLessonListTrialLesson)
        .toString(): VideoLessonRecommendLessonListTrialLesson.fromJson,
    (VideoCalendarEntity).toString(): VideoCalendarEntity.fromJson,
    (VideoManagerItemList).toString(): VideoManagerItemList.fromJson,
    (VideoSquareEntity).toString(): VideoSquareEntity.fromJson,
    (VideoSquareItemList).toString(): VideoSquareItemList.fromJson,
    (VideoSquareItemListAnchorData).toString(): VideoSquareItemListAnchorData
        .fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}